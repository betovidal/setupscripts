# wm independent hotkeys
#

# terminal emulator
super + Return
	s

# program launcher
super + @space
	rofi -monitor -1 -modi run,drun -show run -show-icons -disable-history -scroll-method 1

# Show help
super + bar
	s -e less $HOME/.config/sxhkd/sxhkdrc

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit; pkill -USR1 -x panel.sh ,wm -r}

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }@{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}





# Screen backlight
# Using package acpilight, something different might be needed depending on the
# hardware requirements. Add user to "video" group and read
# https://gitlab.com/wavexx/acpilight to add the corresponding rules in
# /etc/udev/rules.d/90-backlight.rules
{XF86MonBrightnessDown, XF86MonBrightnessUp}
	xbacklight {-dec,-inc} 5

# Emojis
super + minus
	rofi -monitor -1 -modi emoji -show emoji -disable-history -scroll-method 1
	# splatmoji -m type

# lock screen
super + q
	my-lock.sh


# Audio related
XF86AudioRaiseVolume
	pactl set-sink-volume @DEFAULT_SINK@ +5%
XF86AudioLowerVolume
	pactl set-sink-volume @DEFAULT_SINK@ -5%
XF86AudioMute
	pactl set-sink-mute @DEFAULT_SINK@ toggle

# Music related
{XF86AudioPrev, super + F1}
	mpc prev; notify-send -t 1000 "♪" "$(mpc status | sed '1q;d')"
{XF86AudioNext, super + F3}
	mpc next; notify-send -t 1000 "♪" "$(mpc status | sed '1q;d')"
{XF86AudioPlay, super + F2}
	mpc toggle
{XF86AudioStop, super + F4}
	mpc stop
super + shift + Left
	mpc seek -5
super + shift + Right
	mpc seek +5
super + question
	notify-send -t 2000 "♪" "$(mpc status | sed '1q;d')"
super + apostrophe
	mpc playlist | rofi -monitor -1 -format d -dmenu -i -scroll-method 1 | xargs -r mpc play

# super + ctrl + {z,x,c,v,b}
# 	cmus-remote {-z -p -u -s -n}

# bindsym --release Control+$mod+l exec "slock"

# Screenshots
# Cheatsheet:
#   -None=Whole screen
#   -MOD=Selection
#   -SHIFT=To file
#   -CONTROL=Specific window
# Whole Screen to clipboard
@Print
	maim -u | xclip -selection clipboard -t image/png
# Whole Screen to file
shift + @Print
	fname=$(date '+%s').png; maim -u ~/Pictures/caps/$fname; notify-send -t 1000 'Saved capture' $fname
# Selection to clipboard
super + @Print
	maim -u -s | xclip -selection clipboard -t image/png
# Selection to file
super + shift + @Print
	fname=$(date '+%s').png; maim -u -s ~/Pictures/caps/$fname; notify-send -t 1000 'Saved capture' $fname
# Window to clipboard
super + ctrl + @Print
	maim -u -i $(xdotool getactivewindow) | xclip -selection clipboard -t image/png
# Window to file
super + ctrl + shift + @Print
	fname=$(date '+%s').png; maim -u -i $(xdotool getactivewindow) ~/Pictures/caps/$fname; notify-send -t 1000 'Saved capture' $fname
